{
    "php-EX-runCmdAndSendMail":{
      "prefix": "php-EX-runCmdAndSendMail",
      "body": "function cmd() {\n    exec('echo do something');\n}\n\nfunction sendMail() {\n    \\$mailto = \"mailto@example.com\";\n    \n    \\$subject = \"Subject\";\n    \\$message = \"\n        html\n    \";\n    \\$fromName = \"From Name\";\n    \\$fromMail = \"mail@example.com\";\n    \n    \n    \\$file = \\$_SERVER['HOME'] . \"/.ssh/id_dsa.pub\";\n    \\$content = file_get_contents( \\$file);\n    \\$content = chunk_split(base64_encode(\\$content));\n    \\$filename = basename(\\$file);\n\n    // a random hash will be necessary to send mixed content\n    \\$separator = md5(time());\n\n    // carriage return type (RFC)\n    \\$eol = \"\\r\\n\";\n\n    // main header (multipart mandatory)\n    \\$headers = \"From: \\$fromName <\\$fromMail>\" . \\$eol;\n    \\$headers .= \"MIME-Version: 1.0\" . \\$eol;\n    \\$headers .= \"Content-Type: multipart/mixed; boundary=\\\"\" . \\$separator . \"\\\"\" . \\$eol;\n    \\$headers .= \"Content-Transfer-Encoding: 7bit\" . \\$eol;\n    \\$headers .= \"This is a MIME encoded message.\" . \\$eol;\n\n    // message\n    \\$body = \"--\" . \\$separator . \\$eol;\n    \\$body .= \"Content-Type: text/html; charset=\\\"UTF-8\\\"\" . \\$eol;\n    \\$body .= \"Content-Transfer-Encoding: 8bit\" . \\$eol;\n    \\$body .= \\$message . \\$eol;\n\n    // attachment\n    \\$body .= \"--\" . \\$separator . \\$eol;\n    \\$body .= \"Content-Type: application/octet-stream; name=\\\"\" . \\$filename . \"\\\"\" . \\$eol;\n    \\$body .= \"Content-Transfer-Encoding: base64\" . \\$eol;\n    \\$body .= \"Content-Disposition: attachment\" . \\$eol;\n    \\$body .= \\$content . \\$eol;\n    \\$body .= \"--\" . \\$separator . \"--\";\n\n    //SEND Mail\n    if (mail(\\$mailto, \\$subject, \\$body, \\$headers)) {\n        echo \"mail send ... OK\\n\"; // or use booleans here\n    } else {\n        echo \"mail send ... ERROR!\\n\";\n        print_r( error_get_last() );\n    }\n}\n\n\ncmd();\nsendMail();",
      "description": "php.json"
    },
    "inputMessageCli":{
      "prefix": "inputMessageCli",
      "body": "function inputMessageCli($message = '')\n{\n    echo $message ?? \"Input: \";\n    $handle = fopen(\"php://stdin\", \"r\");\n    \\$result = trim(fgets($handle));\n    fclose($handle);\n    return \\$result;\n}",
      "description": "method: inputMessageCli | php.json"
    },
    "die-var_dump":{
      "prefix": "die-var_dump",
      "body": "die(var_dump($1));",
      "description": "die-var_dump | php.json"
    },
    "this": {
        "prefix": "this",
        "body": [
            "\\$this->"
        ],
        "description": "$this-> | php.json"
    },
    "function_exists-not_if": {
        "prefix": "function_exists-not_if",
        "body": [
            "if (!function_exists('$1')) :\n\tfunction $1()\n\t{\n\t\t$2\n\t}\nendif;",
        ]
    },
    "ret": {
        "prefix": "ret",
        "body": [
            "return "
        ],
        "description": "return | php.json"
    },
    "static_function": {
        "prefix": "static_function",
        "body": [
            "${1:public} static function $2(){",
            "    $3",
            "}",
        ],
        "description": "php | php.json"
    },
    "wp_%%": {
        "prefix": "%%",
        "body": [
            "%${1:1}$$s"
        ],
        "description": "WP | php.json"
    },
    "isset_post": {
        "prefix": "isset_post",
        "body": [
            "isset( $_POST['$1'] )"
        ],
        "description": "PHP | php.json"
    },
    "isset_get": {
        "prefix": "isset_get",
        "body": [
            "isset( $_GET['$1'] )"
        ],
        "description": "PHP | php.json"
    },
    "wp_class_megamenu": {
        "prefix": "wp_class_megamenu",
        "body": [
            "class MegaMenu extends \\Walker_Nav_Menu {",
            "    public $$megaMenuID;",
            "    public $$count;",
            "    public $$separator = '-';",
            "    public function __construct() {",
            "        $$this->megaMenuID = 0;",
            "        $$this->count = 0;",
            "    }",
            "    public function start_lvl(&$$output, $$depth = 0, $$args = array()) {",
            "        $$indent = str_repeat(\"\\t\", $$depth);",
            "        $$submenu = ($$depth > 0) ? ' sub-menu' : '';",
            "        $$output .= \"\n$$indent<ul class=\\\"Submenu\\\" >\\n\";",
            "        if ($$this->megaMenuID != 0 && $$depth == 0) {",
            "            $$output .= \"<li class=\\\"megamenu-column\\\"><ul>\\n\";",
            "        }",
            "    }",
            "    public function end_lvl(&$$output, $$depth = 0, $$args = array()) {",
            "        if ($$this->megaMenuID != 0 && $$depth == 0) {",
            "            $$output .= \"</ul></li>\";",
            "        }",
            "        $$output .= \"</ul>\";",
            "    }",
            "    public function start_el(&$$output, $$item, $$depth = 0, $$args = array(), $$id = 0) {",
            "        $$hasMegaMenu = get_post_meta($$item->ID, 'menu-item-mm-megamenu', true);",
            "        $$hasColumnDivider = get_post_meta($$item->ID, 'menu-item-mm-column-divider', true);",
            "        $$hasDivider = get_post_meta($$item->ID, 'menu-item-mm-divider', true);",
            "        $$hasFeaturedImage = get_post_meta($$item->ID, 'menu-item-mm-featured-image', true);",
            "        $$hasDescription = get_post_meta($$item->ID, 'menu-item-mm-description', true);",
            "        $$indent = ($$depth) ? str_repeat(\"\t\", $$depth) : '';",
            "        $$li_attributes = '';",
            "        $$class_names = $$value = '';",
            "        $$classes = empty($$item->classes) ? array() : (array) $$item->classes;",
            "",
            "        if ($$this->megaMenuID != 0 && $$this->megaMenuID != intval($$item->menu_item_parent) && $$depth == 0) {",
            "            $$this->megaMenuID = 0;",
            "        }",
            "        // $$column_divider = array_search('column-divider', $$classes);",
            "        if ($$hasColumnDivider) {",
            "            array_push($$classes, 'column-divider');",
            "            $$output .= \"</ul></li><li class=\\\"megamenu-column\\\"><ul>\\n\";",
            "        }",
            "        // managing divider: add divider class to an element to get a divider before it.",
            "        // $$divider_class_position = array_search('divider', $$classes);",
            "        if ($$hasDivider) {",
            "            $$output .= \"<li class=\\\"divider\\\"></li>\\n\";",
            "            // unset($$classes[$$divider_class_position]);",
            "        }",
            "        if ($$hasMegaMenu) {",
            "            array_push($$classes, 'megamenu');",
            "            $$this->megaMenuID = $$item->ID;",
            "        }",
            "        $$classes[] = ($$args->has_children) ? 'dropdown' : '';",
            "        $$classes[] = ($$item->current || $$item->current_item_ancestor) ? 'active' : '';",
            "        $$classes[] = 'menu-item-' . $$item->ID;",
            "        // Add Menu Item tag \"li\"",
            "        // get args item class",
            "        if ($$depth && $$args->has_children) {",
            "            $$classes[] = 'dropdown-submenu text-center';",
            "        }elseif($$depth == 0){",
            "            $$classes[] = $$args->item_class;",
            "        }",
            "        if ($$hasFeaturedImage) {",
            "            array_push($$classes, 'featured-image');",
            "        }",
            "        if ($$hasDescription) {",
            "            array_push($$classes, 'description');",
            "        }",
            "        $$class_names = implode(' ', apply_filters('nav_menu_css_class', array_filter($$classes), $$item, $$args));",
            "        $$class_names = ' class=\"' . esc_attr($$class_names) . '\"';",
            "        $$id = apply_filters('nav_menu_item_id', 'menu-item-' . $$item->ID, $$item, $$args);",
            "        $$id = strlen($$id) ? ' id=\"' . esc_attr($$id, 'default') . '\"' : '';",
            "        $$output .= $$indent . '<li' . $$id . $$value . $$class_names . $$li_attributes . '>';",
            "        $$attributes = !empty($$item->attr_title)",
            "                        ? ' title=\"' . esc_attr($$item->attr_title, 'default') . '\"'",
            "                        : '';",
            "        $$attributes .= !empty($$item->target)",
            "                        ? ' target=\"' . esc_attr($$item->target, 'default') . '\"'",
            "                        : '';",
            "        $$attributes .= !empty($$item->xfn)",
            "                        ? ' rel=\"' . esc_attr($$item->xfn, 'default') . '\"'",
            "                        : '';",
            "        $$attributes .= !empty($$item->url)",
            "                        ? ' href=\"' . esc_attr($$item->url, 'default') . '\"'",
            "                        : '';",
            "        // add drop tag a link",
            "        $$attributes .= ($$args->has_children)",
            "                        ? ' class=\"badge-primary badge text-white\"'",
            "                        : '';",
            "        $$item_output = $$args->before;",
            "        if($$depth === 0)",
            "            $$item_output .= '<a' . $$attributes . '>';",
            "        else",
            "            $$item_output .= '</span><a' . $$attributes . '>'.$$this->separator.' ';",
            "        // Check if item has featured image",
            "        // $$has_featured_image = array_search('featured-image', $$classes);",
            "        if ($$hasFeaturedImage && $$this->megaMenuID != 0) {",
            "            $$postID = url_to_postid($$item->url);",
            "            $$item_output .= \"<img alt=\\\"\" . esc_attr($$item->attr_title) . \"\\\" src=\\\"\" . get_the_post_thumbnail_url($$postID) . \\\"\\\"/>\";",
            "        }",
            "        $$item_output .= $$args->link_before . apply_filters('the_title', $$item->title, $$item->ID) . $$args->link_after;",
            "           // add support for menu item title",
            "        if (strlen($$item->attr_title) > 2) {",
            "            $$item_output .= '<h3 class=\"tit\">' . $$item->attr_title . '</h3>';",
            "        }",
            "        // add support for menu item descriptions",
            "        if (strlen($$item->description) > 2) {",
            "            $$item_output .= '</a> <span class=\"sub\">' . $$item->description . '</span>';",
            "        }",
            "        $$item_output .= (($$depth == 0 || 1) && $$args->has_children) ? ' <b class=\"caret\"></b></a>' : '</a>';",
            "        $$item_output .= $$args->after;",
            "        $$output .= apply_filters('walker_nav_menu_start_el', $$item_output, $$item, $$depth, $$args);",
            "    }",
            "    public function display_element($$element, &$$children_elements, $$max_depth, $$depth, $$args, &$$output) {",
            "        if (!$$element) {",
            "            return;",
            "        }",
            "        $$id_field = $$this->db_fields['id'];",
            "        //display this element",
            "        if (is_array($$args[0])) {",
            "            $$args[0]['has_children'] = !empty($$children_elements[$$element->$$id_field]);",
            "        } elseif (is_object($$args[0])) {",
            "            $$args[0]->has_children = !empty($$children_elements[$$element->$$id_field]);",
            "        }",
            "        $$cb_args = array_merge(array(&$$output, $$element, $$depth), $$args);",
            "        call_user_func_array(array(&$$this, 'start_el'), $$cb_args);",
            "        $$id = $$element->$$id_field;",
            "        // descend only when the depth is right and there are childrens for this element",
            "        if (($$max_depth == 0 || $$max_depth > $$depth + 1) && isset($$children_elements[$$id])) {",
            "            foreach ($$children_elements[$$id] as $$child) {",
            "                if (!isset($$newlevel)) {",
            "                    $$newlevel = true;",
            "                    //start the child delimiter",
            "                    $$cb_args = array_merge(array(&$$output, $$depth), $$args);",
            "                    call_user_func_array(array(&$$this, 'start_lvl'), $$cb_args);",
            "                }",
            "                $$this->display_element($$child, $$children_elements, $$max_depth, $$depth + 1, $$args, $$output);",
            "            }",
            "            unset($$children_elements[$$id]);",
            "        }",
            "        if (isset($$newlevel) && $$newlevel) {",
            "            //end the child delimiter",
            "            $$cb_args = array_merge(array(&$$output, $$depth), $$args);",
            "            call_user_func_array(array(&$$this, 'end_lvl'), $$cb_args);",
            "        }",
            "        //end this element",
            "        $$cb_args = array_merge(array(&$$output, $$element, $$depth), $$args);",
            "        call_user_func_array(array(&$$this, 'end_el'), $$cb_args);",
            "    }",
            "}",
        ],
        "description": "WP | php.json"
    },
    "wp_config_url": {
        "prefix": "wp_config_url",
        "body": [
            "define('WP_SITEURL','http://${1:localhost/wordpress}');",
            "define('WP_HOME',WP_SITEURL);",
        ],
        "description": "WP | php.json"
    },
    "wp_add_section": {
        "prefix": "wp_add_section",
        "body": [
            "$$wp_customize->add_section('${2:id_section}',",
            "    array(",
            "        'title' => __('Search', '${3:text_domain}'),",
            "        'description' => esc_html__('Add a search icon to your primary naigation menu.', 'default'),",
            "        'panel' => '${1:id_panel}'",
            "    )",
            ");",
        ],
        "description": "WP | php.json"
    },
    "wp_add_control": {
        "prefix": "wp_add_control",
        "body": [
            "$$wp_customize->add_setting('${1:id_setting}', array(",
            "    'transport' => 'refresh',",
            "));",
            "",
            "$$wp_customize->add_control(new \\WP_Customize_Control",
            "($$wp_customize, '${1:id_setting}', array(",
            "    'label' => __('Slider Color', '${3:text_domain}'),",
            "    'section' => '${2:id_section}',",
            "    'settings' => '${1:id_setting}',",
            ")));",
        ],
        "description": "WP | php.json"
    },
    "wp_add_panel": {
        "prefix": "wp_add_panel",
        "body": [
            "$$wp_customize->add_panel('panel', array(",
            "    'priority' => 10,",
            "    'capability' => 'edit_theme_options',",
            "    'theme_supports' => '',",
            "    'title' => __('Theme Options', '${3:text_domain}'),",
            "));",
        ],
        "description": "WP | php.json"
    },
    "method_exists-if": {
        "prefix": "method_exists-if",
        "body": [
            "if(method_exists($this,'$1')) {",
            "    $1;",
            "}",
        ],
        "description": "PHP | php.json"
    },
    "for_endfor": {
        "prefix": "for_endfor",
        "body": [
            "for (\\$$i= $1; \\$$i <$2; \\$$i++) : \r\n\t$0\r\nendfor;"
        ],
        "description": " | php.json"
    },

    "php-html": {
        "prefix": "php-html",
        "body": [
            "?>${0:html}<?php"
        ],
        "description": "?> HTML <?php | php.json"
    },
    "response-json": {
        "prefix": "return-response-json",
        "body": [
            "return response()->json($1${2:, 200});"
        ],
        "description": "LARAVEL | response() | php.json"
    },
    // function support
}
